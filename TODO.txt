CanKit.Net 路线图 / 待办（TODO）

范围：覆盖 Core 核心层 + ZLG + SocketCAN + PCAN 后端的改进项。优先级标签：[P0]=关键，[P1]=近期，[P2]=可选。

核心 / 架构
- [P0] 端点处理器注册需可确定，避免依赖类型静态构造器（如 ZlgEndpoint/SocketCanEndpoint/PcanEndpoint）。方案：
  - 在各后端程序集添加 ModuleInitializer，于模块加载时完成注册；
  - 或引入 IEndpointRegistrar 约定，在 CanRegistry.BuildRegistry() 中集中扫描注册。
- [P1] 动态能力发现：设备/通道打开后探测运行期能力，并通过 OptionsConfigurator.UpdateDynamicFeatures(...) 合并（如 FD、合并接收、过滤器、总线占用率等）。
- [P1] 统一“事件泵”（订阅计数 + 后台接收循环 + 取消 + 释放）为共享 Helper，减少各后端行为差异。
- [P2] 提供 IAsyncEnumerable<CanReceiveData>/IObservable 适配，作为一等的流式接收 API。

选项与生成器
- [P1] 将 SocketCAN/PCAN 的 Options 迁移为 Source Generator 风格（[CanOption]/[CanOptionItem]），与 ZLG 保持一致，统一 Apply/变更追踪语义。
- [P1] 明确并文档化选项阶段（Init vs Runtime），在 Applier 层严格校验；优化跨阶段误用的报错信息。
- [P2] 增加常见约束的校验辅助（如 FD 必须提供仲裁/数据位率；Classic 仅需 BaudRate）。

错误与诊断
- [P1] 标准化各后端“原生错误 → FrameErrorKind”的映射；补充单元测试（SocketCAN 已有工具可参考）。
- [P1] 提升异常信息的上下文（包含后端操作名称），必要时给出建议修复提示。
- [P2] 提供结构化诊断开关（DEBUG 构建下输出底层原生调用信息）。

事件、并发与生命周期
- [P0] 统一释放语义：先停事件泵，再关闭底层资源，最后释放 owner。SocketCAN 已基本遵循；PCAN、ZLG 对齐。
- [P1] 订阅计数与事件泵生命周期集中化；保证事件 add/remove 的线程安全。
- [P2] 为阻塞式 Receive 与长时操作暴露 CancellationToken。

SocketCAN
- [P0] 实现 Reset/ClearBuffer/GetReceiveCount：
  - Reset：最低可用方案为重建 socket 并重新绑定与应用选项；
  - ClearBuffer：非阻塞循环读取直至 FIONREAD==0；
  - GetReceiveCount：通过 FIONREAD 估算（按帧大小/探测方式折算）或使用“无消耗探测”。
- [P1] 运行期能力探测与应用：
  - FD 可用性（setsockopt CAN_RAW_FD_FRAMES）、时间戳模式（SO_TIMESTAMPING / SO_TIMESTAMPNS）、echo 回环；
  - 通过 UpdateDynamicFeatures 合入 Options.Features。
- [P1] 过滤器：校验标准/扩展帧的掩码行为并文档化；为两种场景补测试。
- [P2] BusUsage/ErrorCounters：考虑软实现（尽力而为），或在 Options 中暴露“不支持原因”。
- [P2] 提供关闭错误帧订阅的选项（当前默认订阅 CAN_ERR_MASK，当用户只关心数据帧时可关闭）。

PCAN
- [P0] 后台接收循环与事件派发：新增类似 SocketCAN 的事件泵（基于 Task/线程 + PCANBasic.Read 轮询）。
- [P1] ClearBuffer/GetReceiveCount：基于 PCANBasic.Reset 和/或状态查询实现。
- [P1] 过滤器：将 CanFilter 规则映射到 PCAN 的验收过滤配置，明确不支持的规则与限制。
- [P1] FD 支持：按 PCAN-Basic FD API 实现 PcanFdTransceiver，并用特性门控；Provider 的 StaticFeatures 在支持时扩展。
- [P2] ErrorCounters/BusUsage：评估 PCANBasic.GetValue 是否可用；可映射则实现，否则清晰文档“不支持”。

ZLG
- [P1] 不同设备型号的运行期能力探测；设置 ZlgFeature 并合并到 CanFeature。
- [P1] 过滤配置提示更清晰：保持“单一规则类型”限制，对混用给出明确诊断。
- [P2] 在可行处用共享事件泵 Helper 对齐其他后端的行为。

Endpoint 与 URI
- [P0] 稳定端点注册（见“核心/P0”）。增加测试以验证 CanBus.Open("zlg://..."|"socketcan://..."|"pcan://...") 在无需显式触发类型加载时也能工作。
- [P1] 完整文档化端点语法：示例、查询键、片段语义（index/ch# 解析）。
- [P2] 可考虑提供 can:// 统一前缀，内部再分发到具体 Provider；同时保留现有后端专有前缀。

测试与 CI
- [P1] 单元测试：端点注册、Options Apply 路径（生成器）、特性门控、各后端过滤器映射。
- [P1] Fakes/集成：扩展测试桩以模拟错误帧与错误计数。
- [P2] 可选硬件集成矩阵（用特性标记），在具备条件的 CI 环境对 ZLG/PCAN/SocketCAN 做端到端验证。

文档与示例
- [P1] 为每个后端提供快速上手：前置条件（驱动/内核）、端点字符串、常见坑。
- [P1] 增补示例：Classic/FD 的收发、过滤器（标准/扩展）、监听模式、echo 模式、错误帧处理。
- [P2] 日志/追踪使用说明与排障手册。

性能
- [P2] 降低收发器中的分配（ArrayPool 复用缓冲、在安全前提下复用帧结构）；压测 Classic 与 FD 路径。
- [P2] 在可用场景下考虑发送批处理与减少系统调用（如 writev）。
