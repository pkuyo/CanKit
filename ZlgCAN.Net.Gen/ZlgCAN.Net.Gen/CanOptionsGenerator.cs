

using System.Collections.Immutable;
using System.ComponentModel;
using System.Linq;
using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
namespace System.Runtime.CompilerServices
{
    [EditorBrowsable(EditorBrowsableState.Never)]
    internal class IsExternalInit { }
}
namespace ZlgCAN.Net.Gen{

    [Generator(LanguageNames.CSharp)]
    public sealed class CanOptionsGenerator : IIncrementalGenerator
    {
        public void Initialize(IncrementalGeneratorInitializationContext context)
        {
            var candidates = context.SyntaxProvider.CreateSyntaxProvider(
                static (node, _) => node is ClassDeclarationSyntax c && c.AttributeLists.Count > 0,
                static (ctx, _) =>
                {
                    var cls = (ClassDeclarationSyntax)ctx.Node;
                    var model = ctx.SemanticModel;
                    if (model.GetDeclaredSymbol(cls) is not INamedTypeSymbol sym) return default;

                    bool isCanOptions = sym.GetAttributes()
                        .Any(a => a.AttributeClass?.Name is "CanOptionsAttribute" or "CanOptions");
                    if (!isCanOptions) return default;

              
                    var items = sym.GetAttributes()
                        .Where(a => a.AttributeClass?.Name is "CanValueAttribute" or "CanValue")
                        .Select(a =>
                        {
                            string name = (string)a.ConstructorArguments[0].Value!;
                            var typeSym = (ITypeSymbol)a.ConstructorArguments[1].Value!;
                            var access = a.NamedArguments.FirstOrDefault(kv => kv.Key == "Access").Value;
                            var defVal = a.NamedArguments.FirstOrDefault(kv => kv.Key == "DefaultValue").Value;

                            return new Item(
                                Name: name,
                                Type: typeSym,
                                Access: access.IsNull ? "GetSet" : (uint)(access!.Value!) switch
                                {
                                    1 => "Get",
                                    2 => "Set",
                                    _ => "GetSet"
                                },
                                DefaultValueExpr: ToLiteral(defVal, typeSym)
                            );
                        })
                        .ToImmutableArray();

                    return new Result(sym, items);
                });

            context.RegisterSourceOutput(candidates, static (spc, r) =>
            {
                var ns = r.Symbol!.ContainingNamespace.IsGlobalNamespace ? null : r.Symbol.ContainingNamespace.ToDisplayString();
                var sb = new StringBuilder();
                sb.AppendLine("// <auto-generated/>");
                sb.AppendLine("using System; using System.Collections.Generic;");
                if (ns is not null) sb.AppendLine($"namespace {ns} {{");
                sb.AppendLine($"public partial class {r.Symbol!.Name} :  global::ZlgCAN.Net.Core.Abstractions.ICanOptions {{");

                foreach (var it in r.Items)
                {
                    var field = "_" + it.Name;
                    var dirty = "_dirty_" + it.Name;
                    var typeName = it.Type.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat);

                    // 字段 + 脏位 + 默认值
                    sb.AppendLine($"  private {typeName} {field}{(it.DefaultValueExpr is null ? ";" : " = " + it.DefaultValueExpr + ";")}");
                    sb.AppendLine($"  private bool {dirty};");

                    // 属性
                    sb.AppendLine($"  public {typeName} {it.Name} {{");
                    if (it.Access.Contains("Get"))
                    {
                        sb.AppendLine($"    get => {field};");
                    }
                    
                    if (it.Access.Contains("Set"))
                    {
                        sb.AppendLine($"    set {{ if (!global::System.Collections.Generic.EqualityComparer<{typeName}>.Default.Equals({field}, value)) {{ {field} = value; {dirty} = true; }} }}");
                    }
                    sb.AppendLine("  }");
                }

                // Apply
                sb.AppendLine("  public void Apply(global::ZlgCAN.Net.Core.Abstractions.ICanApplier applier, bool force = false) {");
                foreach (var it in r.Items)
                {
                    var field = "_" + it.Name;
                    var dirty = "_dirty_" + it.Name;
                    sb.AppendLine($"    if (({dirty} || force) && applier.ApplyOne<{it.Type}>(\"{it.Name}\", {field})) {dirty} = false;");
                }
                sb.AppendLine("  }");

                // HasChanges / GetChangedNames / ClearChanges
                if (r.Items.Length > 0)
                {
                    sb.AppendLine("  public bool HasChanges => " + string.Join(" | ", r.Items.Select(i => "_dirty_" + i.Name)) + ";");
                    sb.AppendLine("  public System.Collections.Generic.IEnumerable<string> GetChangedNames() {");
                    foreach (var it in r.Items)
                        sb.AppendLine($"    if (_dirty_{it.Name}) yield return \"{it.Name}\";");
                    sb.AppendLine("  }");
                    sb.AppendLine("  public void ClearChanges() {");
                    foreach (var it in r.Items)
                        sb.AppendLine($"    _dirty_{it.Name} = false;");
                    sb.AppendLine("  }");
                }

                sb.AppendLine("}"); if (ns is not null) sb.AppendLine("}");
                spc.AddSource($"{r.Symbol!.Name}.g.cs", sb.ToString());
            });
        }

        private static string? ToLiteral(TypedConstant def, ITypeSymbol typeSym)
        {
            if (def.IsNull) return null;
            var v = def.Value;
            return typeSym.SpecialType switch
            {
                SpecialType.System_Int32 => v is int i ? i.ToString() : null,
                SpecialType.System_Boolean => v is bool b ? (b ? "true" : "false") : null,
                SpecialType.System_String => v is string s ? $"@\"{s.Replace("\"","\"\"")}\"" : "null",
                _ => v?.ToString()
            };
        }

        private readonly record struct Result(INamedTypeSymbol Symbol, ImmutableArray<Item> Items);
        private readonly record struct Item(string Name, ITypeSymbol Type, string Access, string? DefaultValueExpr);
    }
}
